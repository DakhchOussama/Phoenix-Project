// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  UserID          String       @id @default(uuid())
  Fname           String
  Sname           String
  Email           String    @unique
  Phone           String    @unique
  Birthday        DateTime
  Department      String
  Password        String
  AvatarURL       String
  Ban             Boolean?  @default(false)
  isAdmin         Boolean?  @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  notifications   Notification[]
  friendsAsUser   Friends[] @relation("UserFriends")
  friendsAsFriend Friends[] @relation("FriendFriends")
  postTranslates  PostTranslate[]
  posts           Post[]
}

model Notification {
  NotificationID    String       @id @default(uuid())
  Time              DateTime
  NotificationType  String
  FriendID          Int
  UserID            String
  isRead            Boolean   @default(false)
  createdAt         DateTime  @default(now())

  user              User @relation(fields: [UserID], references: [UserID])
}

model Post {
  PostID     String       @id @default(uuid())
  ImgURL     String?
  Title      String
  Categories String
  Likes      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId     String
  user       User @relation(fields: [userId], references: [UserID])
  translates PostTranslate[]
  comments   Comment[]
}

model PostTranslate {
  PostTranslateID String       @id @default(uuid())
  TranslateTitle  String
  AdminID         String
  PostID          String

  admin           User @relation(fields: [AdminID], references: [UserID])
  post            Post @relation(fields: [PostID], references: [PostID])
}

model Friends {
  FriendID String       @id @default(uuid())
  UserId   String
  FriendId String

  user     User @relation(name: "UserFriends", fields: [UserId], references: [UserID])
  friend   User @relation(name: "FriendFriends", fields: [FriendId], references: [UserID])

  @@unique([UserId, FriendId])
}

model Comment {
  CommentID  String       @id @default(uuid())
  Content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  postId     String
  post       Post @relation(fields: [postId], references: [PostID])
}
