// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  UserID     String   @id @default(uuid())
  Fname      String
  Sname      String
  Email      String   @unique
  Phone      String   @unique
  Birthday   DateTime
  Department String
  Password   String
  AvatarURL  String?
  BanDate    DateTime?
  Ban        Boolean? @default(false)
  isAdmin    Boolean? @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  notifications       Notification[] @relation("UserNotifications")
  friendNotifications Notification[] @relation("FriendNotifications")
  friendsAsUser       Friends[]      @relation("UserFriends")
  friendsAsFriend     Friends[]      @relation("FriendFriends")
  posts               Post[]
  likes               Like[] // Relation to Like model
  comments            Comment[]
}

model Notification {
  NotificationID   String   @id @default(uuid())
  NotificationType String
  FriendID         String
  UserID           String
  createdAt        DateTime @default(now())

  user   User @relation("UserNotifications", fields: [UserID], references: [UserID])
  friend User @relation("FriendNotifications", fields: [FriendID], references: [UserID])
}

model Post {
  PostID     String   @id @default(uuid())
  ImgURL     String?
  Title      String
  Categories String
  Type       String
  isEnabled  Boolean  @default(false)
  Likes      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId     String
  user       User      @relation(fields: [userId], references: [UserID])
  translates String?
  comments   Comment[]
  likes      Like[] // Relation to Like model
}

model Like {
  LikeID    String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [PostID])
  user User @relation(fields: [userId], references: [UserID])

  @@unique([postId, userId]) // Ensure that a user can only like a post once
}

model Friends {
  FriendID String @id @default(uuid())
  UserId   String
  FriendId String

  user   User @relation(name: "UserFriends", fields: [UserId], references: [UserID])
  friend User @relation(name: "FriendFriends", fields: [FriendId], references: [UserID])

  @@unique([UserId, FriendId])
}

model Comment {
  CommentID String   @id @default(uuid())
  Content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId String
  userId String
  post   Post   @relation(fields: [postId], references: [PostID])
  user   User   @relation(fields: [userId], references: [UserID])
}
